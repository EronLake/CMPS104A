Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_DECLID
   TOK_BINOP
   TOK_UNOP
   TOK_VARDECL
   TOK_PARAMLIST
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_INDEX
   TOK_NEWSTRING
   TOK_RETURNVOID
   TOK_THEN
   '<'
   '>'


State 80 conflicts: 14 shift/reduce
State 102 conflicts: 14 shift/reduce
State 120 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: TOK_STRUCT TOK_IDENT '{' fdeclist '}'
    9          | TOK_STRUCT TOK_IDENT '{' '}'

   10 fdeclist: fdeclist fielddecl ';'
   11         | fielddecl ';'

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT
   13          | basetype TOK_IDENT

   14 basetype: TOK_VOID
   15         | TOK_INT
   16         | TOK_CHAR
   17         | TOK_STRING
   18         | TOK_IDENT

   19 function: identdecl '(' idecllist ')' block
   20         | identdecl '(' idecllist ')' ';'
   21         | identdecl '(' ')' block
   22         | identdecl '(' ')' ';'

   23 idecllist: idecllist ',' identdecl
   24          | identdecl

   25 identdecl: basetype TOK_ARRAY TOK_IDENT
   26          | basetype TOK_IDENT

   27 block: '{' smtlist '}'
   28      | '{' '}'

   29 smtlist: smtlist statement
   30        | statement

   31 statement: block
   32          | vardecl
   33          | while
   34          | ifelse
   35          | return
   36          | expr ';'
   37          | ';'

   38 vardecl: identdecl '=' expr ';'

   39 while: TOK_WHILE '(' expr ')' statement

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement
   41       | TOK_IF '(' expr ')' statement

   42 return: TOK_RETURN expr ';'
   43       | TOK_RETURN ';'

   44 expr: expr binop expr
   45     | unop expr
   46     | allocator
   47     | call
   48     | '(' expr ')'
   49     | variable
   50     | constant

   51 binop: TOK_EQ
   52      | TOK_NE
   53      | TOK_LT
   54      | TOK_LE
   55      | TOK_GT
   56      | TOK_GE
   57      | '+'
   58      | '-'
   59      | '*'
   60      | '/'
   61      | '%'
   62      | '='

   63 unop: '+'
   64     | '-'
   65     | '!'
   66     | TOK_ORD
   67     | TOK_CHR

   68 allocator: TOK_NEW TOK_IDENT '(' ')'
   69          | TOK_NEW TOK_STRING '(' expr ')'
   70          | TOK_NEW basetype '[' expr ']'

   71 call: TOK_IDENT '(' calllist ')'
   72     | TOK_IDENT '(' ')'

   73 calllist: calllist ',' expr
   74         | expr

   75 variable: TOK_IDENT
   76         | expr '[' expr ']'
   77         | expr '.' TOK_IDENT

   78 constant: TOK_INTCON
   79         | TOK_CHARCON
   80         | TOK_STRINGCON
   81         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 65
'%' (37) 61
'(' (40) 19 20 21 22 39 40 41 48 68 69 71 72
')' (41) 19 20 21 22 39 40 41 48 68 69 71 72
'*' (42) 59
'+' (43) 57 63
',' (44) 23 73
'-' (45) 58 64
'.' (46) 77
'/' (47) 60
';' (59) 6 10 11 20 22 36 37 38 42 43
'<' (60)
'=' (61) 38 62
'>' (62)
'[' (91) 70 76
']' (93) 70 76
'{' (123) 8 9 27 28
'}' (125) 5 8 9 27 28
error (256) 5 6
TOK_VOID (258) 14
TOK_CHAR (259) 16
TOK_INT (260) 15
TOK_STRING (261) 17 69
TOK_IF (262) 40 41
TOK_ELSE (263) 40
TOK_WHILE (264) 39
TOK_RETURN (265) 42 43
TOK_STRUCT (266) 8 9
TOK_NULL (267) 81
TOK_NEW (268) 68 69 70
TOK_ARRAY (269) 12 25
TOK_EQ (270) 51
TOK_NE (271) 52
TOK_LT (272) 53
TOK_LE (273) 54
TOK_GT (274) 55
TOK_GE (275) 56
TOK_IDENT (276) 8 9 12 13 18 25 26 68 71 72 75 77
TOK_INTCON (277) 78
TOK_CHARCON (278) 79
TOK_STRINGCON (279) 80
TOK_BLOCK (280)
TOK_CALL (281)
TOK_IFELSE (282)
TOK_INITDECL (283)
TOK_POS (284)
TOK_NEG (285)
TOK_NEWARRAY (286)
TOK_TYPEID (287)
TOK_FIELD (288)
TOK_ORD (289) 66
TOK_CHR (290) 67
TOK_ROOT (291)
TOK_DECLID (292)
TOK_BINOP (293)
TOK_UNOP (294)
TOK_VARDECL (295)
TOK_PARAMLIST (296)
TOK_FUNCTION (297)
TOK_PROTOTYPE (298)
TOK_INDEX (299)
TOK_NEWSTRING (300)
TOK_RETURNVOID (301)
TOK_THEN (302)


Nonterminals, with rules where they appear

$accept (66)
    on left: 0
start (67)
    on left: 1, on right: 0
program (68)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (69)
    on left: 8 9, on right: 2
fdeclist (70)
    on left: 10 11, on right: 8 10
fielddecl (71)
    on left: 12 13, on right: 10 11
basetype (72)
    on left: 14 15 16 17 18, on right: 12 13 25 26 70
function (73)
    on left: 19 20 21 22, on right: 3
idecllist (74)
    on left: 23 24, on right: 19 20 23
identdecl (75)
    on left: 25 26, on right: 19 20 21 22 23 24 38
block (76)
    on left: 27 28, on right: 19 21 31
smtlist (77)
    on left: 29 30, on right: 27 29
statement (78)
    on left: 31 32 33 34 35 36 37, on right: 4 29 30 39 40 41
vardecl (79)
    on left: 38, on right: 32
while (80)
    on left: 39, on right: 33
ifelse (81)
    on left: 40 41, on right: 34
return (82)
    on left: 42 43, on right: 35
expr (83)
    on left: 44 45 46 47 48 49 50, on right: 36 38 39 40 41 42 44 45
    48 69 70 73 74 76 77
binop (84)
    on left: 51 52 53 54 55 56 57 58 59 60 61 62, on right: 44
unop (85)
    on left: 63 64 65 66 67, on right: 45
allocator (86)
    on left: 68 69 70, on right: 46
call (87)
    on left: 71 72, on right: 47
calllist (88)
    on left: 73 74, on right: 71 73
variable (89)
    on left: 75 76 77, on right: 49
constant (90)
    on left: 78 79 80 81, on right: 50


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25
    '('            shift, and go to state 26

    $end  reduce using rule 1 (start)

    structdef  go to state 27
    basetype   go to state 28
    function   go to state 29
    identdecl  go to state 30
    block      go to state 31
    statement  go to state 32
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 43
    ';'  shift, and go to state 44


State 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


State 6

   16 basetype: TOK_CHAR .

    $default  reduce using rule 16 (basetype)


State 7

   15 basetype: TOK_INT .

    $default  reduce using rule 15 (basetype)


State 8

   17 basetype: TOK_STRING .

    $default  reduce using rule 17 (basetype)


State 9

   40 ifelse: TOK_IF . '(' expr ')' statement TOK_ELSE statement
   41       | TOK_IF . '(' expr ')' statement

    '('  shift, and go to state 45


State 10

   39 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 46


State 11

   42 return: TOK_RETURN . expr ';'
   43       | TOK_RETURN . ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    ';'            shift, and go to state 48
    '('            shift, and go to state 26

    expr       go to state 49
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 12

    8 structdef: TOK_STRUCT . TOK_IDENT '{' fdeclist '}'
    9          | TOK_STRUCT . TOK_IDENT '{' '}'

    TOK_IDENT  shift, and go to state 50


State 13

   81 constant: TOK_NULL .

    $default  reduce using rule 81 (constant)


State 14

   68 allocator: TOK_NEW . TOK_IDENT '(' ')'
   69          | TOK_NEW . TOK_STRING '(' expr ')'
   70          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 51
    TOK_IDENT   shift, and go to state 52

    basetype  go to state 53


State 15

   18 basetype: TOK_IDENT .
   71 call: TOK_IDENT . '(' calllist ')'
   72     | TOK_IDENT . '(' ')'
   75 variable: TOK_IDENT .

    '('  shift, and go to state 54

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_IDENT  reduce using rule 18 (basetype)
    $default   reduce using rule 75 (variable)


State 16

   78 constant: TOK_INTCON .

    $default  reduce using rule 78 (constant)


State 17

   79 constant: TOK_CHARCON .

    $default  reduce using rule 79 (constant)


State 18

   80 constant: TOK_STRINGCON .

    $default  reduce using rule 80 (constant)


State 19

   66 unop: TOK_ORD .

    $default  reduce using rule 66 (unop)


State 20

   67 unop: TOK_CHR .

    $default  reduce using rule 67 (unop)


State 21

   63 unop: '+' .

    $default  reduce using rule 63 (unop)


State 22

   64 unop: '-' .

    $default  reduce using rule 64 (unop)


State 23

   65 unop: '!' .

    $default  reduce using rule 65 (unop)


State 24

   37 statement: ';' .

    $default  reduce using rule 37 (statement)


State 25

   27 block: '{' . smtlist '}'
   28      | '{' . '}'

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '}'            shift, and go to state 55
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25
    '('            shift, and go to state 26

    basetype   go to state 28
    identdecl  go to state 56
    block      go to state 31
    smtlist    go to state 57
    statement  go to state 58
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 26

   48 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26

    expr       go to state 59
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 27

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 28

   25 identdecl: basetype . TOK_ARRAY TOK_IDENT
   26          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 60
    TOK_IDENT  shift, and go to state 61


State 29

    3 program: program function .

    $default  reduce using rule 3 (program)


State 30

   19 function: identdecl . '(' idecllist ')' block
   20         | identdecl . '(' idecllist ')' ';'
   21         | identdecl . '(' ')' block
   22         | identdecl . '(' ')' ';'
   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 62
    '('  shift, and go to state 63


State 31

   31 statement: block .

    $default  reduce using rule 31 (statement)


State 32

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 33

   32 statement: vardecl .

    $default  reduce using rule 32 (statement)


State 34

   33 statement: while .

    $default  reduce using rule 33 (statement)


State 35

   34 statement: ifelse .

    $default  reduce using rule 34 (statement)


State 36

   35 statement: return .

    $default  reduce using rule 35 (statement)


State 37

   36 statement: expr . ';'
   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77
    ';'     shift, and go to state 78

    binop  go to state 79


State 38

   45 expr: unop . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26

    expr       go to state 80
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 39

   46 expr: allocator .

    $default  reduce using rule 46 (expr)


State 40

   47 expr: call .

    $default  reduce using rule 47 (expr)


State 41

   49 expr: variable .

    $default  reduce using rule 49 (expr)


State 42

   50 expr: constant .

    $default  reduce using rule 50 (expr)


State 43

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 44

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 45

   40 ifelse: TOK_IF '(' . expr ')' statement TOK_ELSE statement
   41       | TOK_IF '(' . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26

    expr       go to state 81
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 46

   39 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26

    expr       go to state 82
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 47

   71 call: TOK_IDENT . '(' calllist ')'
   72     | TOK_IDENT . '(' ')'
   75 variable: TOK_IDENT .

    '('  shift, and go to state 54

    $default  reduce using rule 75 (variable)


State 48

   43 return: TOK_RETURN ';' .

    $default  reduce using rule 43 (return)


State 49

   42 return: TOK_RETURN expr . ';'
   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77
    ';'     shift, and go to state 83

    binop  go to state 79


State 50

    8 structdef: TOK_STRUCT TOK_IDENT . '{' fdeclist '}'
    9          | TOK_STRUCT TOK_IDENT . '{' '}'

    '{'  shift, and go to state 84


State 51

   17 basetype: TOK_STRING .
   69 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 85

    $default  reduce using rule 17 (basetype)


State 52

   18 basetype: TOK_IDENT .
   68 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 86

    $default  reduce using rule 18 (basetype)


State 53

   70 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 87


State 54

   71 call: TOK_IDENT '(' . calllist ')'
   72     | TOK_IDENT '(' . ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26
    ')'            shift, and go to state 88

    expr       go to state 89
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    calllist   go to state 90
    variable   go to state 41
    constant   go to state 42


State 55

   28 block: '{' '}' .

    $default  reduce using rule 28 (block)


State 56

   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 62


State 57

   27 block: '{' smtlist . '}'
   29 smtlist: smtlist . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '}'            shift, and go to state 91
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25
    '('            shift, and go to state 26

    basetype   go to state 28
    identdecl  go to state 56
    block      go to state 31
    statement  go to state 92
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 58

   30 smtlist: statement .

    $default  reduce using rule 30 (smtlist)


State 59

   44 expr: expr . binop expr
   48     | '(' expr . ')'
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77
    ')'     shift, and go to state 93

    binop  go to state 79


State 60

   25 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 94


State 61

   26 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


State 62

   38 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26

    expr       go to state 95
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 63

   19 function: identdecl '(' . idecllist ')' block
   20         | identdecl '(' . idecllist ')' ';'
   21         | identdecl '(' . ')' block
   22         | identdecl '(' . ')' ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 96
    ')'         shift, and go to state 97

    basetype   go to state 28
    idecllist  go to state 98
    identdecl  go to state 99


State 64

   51 binop: TOK_EQ .

    $default  reduce using rule 51 (binop)


State 65

   52 binop: TOK_NE .

    $default  reduce using rule 52 (binop)


State 66

   53 binop: TOK_LT .

    $default  reduce using rule 53 (binop)


State 67

   54 binop: TOK_LE .

    $default  reduce using rule 54 (binop)


State 68

   55 binop: TOK_GT .

    $default  reduce using rule 55 (binop)


State 69

   56 binop: TOK_GE .

    $default  reduce using rule 56 (binop)


State 70

   62 binop: '=' .

    $default  reduce using rule 62 (binop)


State 71

   57 binop: '+' .

    $default  reduce using rule 57 (binop)


State 72

   58 binop: '-' .

    $default  reduce using rule 58 (binop)


State 73

   59 binop: '*' .

    $default  reduce using rule 59 (binop)


State 74

   60 binop: '/' .

    $default  reduce using rule 60 (binop)


State 75

   61 binop: '%' .

    $default  reduce using rule 61 (binop)


State 76

   76 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26

    expr       go to state 100
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 77

   77 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 101


State 78

   36 statement: expr ';' .

    $default  reduce using rule 36 (statement)


State 79

   44 expr: expr binop . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26

    expr       go to state 102
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 80

   44 expr: expr . binop expr
   45     | unop expr .
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77

    TOK_EQ    [reduce using rule 45 (expr)]
    TOK_NE    [reduce using rule 45 (expr)]
    TOK_LT    [reduce using rule 45 (expr)]
    TOK_LE    [reduce using rule 45 (expr)]
    TOK_GT    [reduce using rule 45 (expr)]
    TOK_GE    [reduce using rule 45 (expr)]
    '='       [reduce using rule 45 (expr)]
    '+'       [reduce using rule 45 (expr)]
    '-'       [reduce using rule 45 (expr)]
    '*'       [reduce using rule 45 (expr)]
    '/'       [reduce using rule 45 (expr)]
    '%'       [reduce using rule 45 (expr)]
    '['       [reduce using rule 45 (expr)]
    '.'       [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)

    binop  go to state 79


State 81

   40 ifelse: TOK_IF '(' expr . ')' statement TOK_ELSE statement
   41       | TOK_IF '(' expr . ')' statement
   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77
    ')'     shift, and go to state 103

    binop  go to state 79


State 82

   39 while: TOK_WHILE '(' expr . ')' statement
   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77
    ')'     shift, and go to state 104

    binop  go to state 79


State 83

   42 return: TOK_RETURN expr ';' .

    $default  reduce using rule 42 (return)


State 84

    8 structdef: TOK_STRUCT TOK_IDENT '{' . fdeclist '}'
    9          | TOK_STRUCT TOK_IDENT '{' . '}'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 96
    '}'         shift, and go to state 105

    fdeclist   go to state 106
    fielddecl  go to state 107
    basetype   go to state 108


State 85

   69 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26

    expr       go to state 109
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 86

   68 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 110


State 87

   70 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26

    expr       go to state 111
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 88

   72 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 72 (call)


State 89

   44 expr: expr . binop expr
   74 calllist: expr .
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77

    $default  reduce using rule 74 (calllist)

    binop  go to state 79


State 90

   71 call: TOK_IDENT '(' calllist . ')'
   73 calllist: calllist . ',' expr

    ')'  shift, and go to state 112
    ','  shift, and go to state 113


State 91

   27 block: '{' smtlist '}' .

    $default  reduce using rule 27 (block)


State 92

   29 smtlist: smtlist statement .

    $default  reduce using rule 29 (smtlist)


State 93

   48 expr: '(' expr ')' .

    $default  reduce using rule 48 (expr)


State 94

   25 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 25 (identdecl)


State 95

   38 vardecl: identdecl '=' expr . ';'
   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77
    ';'     shift, and go to state 114

    binop  go to state 79


State 96

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


State 97

   21 function: identdecl '(' ')' . block
   22         | identdecl '(' ')' . ';'

    ';'  shift, and go to state 115
    '{'  shift, and go to state 25

    block  go to state 116


State 98

   19 function: identdecl '(' idecllist . ')' block
   20         | identdecl '(' idecllist . ')' ';'
   23 idecllist: idecllist . ',' identdecl

    ')'  shift, and go to state 117
    ','  shift, and go to state 118


State 99

   24 idecllist: identdecl .

    $default  reduce using rule 24 (idecllist)


State 100

   44 expr: expr . binop expr
   76 variable: expr . '[' expr ']'
   76         | expr '[' expr . ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77
    ']'     shift, and go to state 119

    binop  go to state 79


State 101

   77 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 77 (variable)


State 102

   44 expr: expr . binop expr
   44     | expr binop expr .
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77

    TOK_EQ    [reduce using rule 44 (expr)]
    TOK_NE    [reduce using rule 44 (expr)]
    TOK_LT    [reduce using rule 44 (expr)]
    TOK_LE    [reduce using rule 44 (expr)]
    TOK_GT    [reduce using rule 44 (expr)]
    TOK_GE    [reduce using rule 44 (expr)]
    '='       [reduce using rule 44 (expr)]
    '+'       [reduce using rule 44 (expr)]
    '-'       [reduce using rule 44 (expr)]
    '*'       [reduce using rule 44 (expr)]
    '/'       [reduce using rule 44 (expr)]
    '%'       [reduce using rule 44 (expr)]
    '['       [reduce using rule 44 (expr)]
    '.'       [reduce using rule 44 (expr)]
    $default  reduce using rule 44 (expr)

    binop  go to state 79


State 103

   40 ifelse: TOK_IF '(' expr ')' . statement TOK_ELSE statement
   41       | TOK_IF '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25
    '('            shift, and go to state 26

    basetype   go to state 28
    identdecl  go to state 56
    block      go to state 31
    statement  go to state 120
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 104

   39 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25
    '('            shift, and go to state 26

    basetype   go to state 28
    identdecl  go to state 56
    block      go to state 31
    statement  go to state 121
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 105

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 9 (structdef)


State 106

    8 structdef: TOK_STRUCT TOK_IDENT '{' fdeclist . '}'
   10 fdeclist: fdeclist . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 96
    '}'         shift, and go to state 122

    fielddecl  go to state 123
    basetype   go to state 108


State 107

   11 fdeclist: fielddecl . ';'

    ';'  shift, and go to state 124


State 108

   12 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   13          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 125
    TOK_IDENT  shift, and go to state 126


State 109

   44 expr: expr . binop expr
   69 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77
    ')'     shift, and go to state 127

    binop  go to state 79


State 110

   68 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 68 (allocator)


State 111

   44 expr: expr . binop expr
   70 allocator: TOK_NEW basetype '[' expr . ']'
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77
    ']'     shift, and go to state 128

    binop  go to state 79


State 112

   71 call: TOK_IDENT '(' calllist ')' .

    $default  reduce using rule 71 (call)


State 113

   73 calllist: calllist ',' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 47
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    '('            shift, and go to state 26

    expr       go to state 129
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 114

   38 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 38 (vardecl)


State 115

   22 function: identdecl '(' ')' ';' .

    $default  reduce using rule 22 (function)


State 116

   21 function: identdecl '(' ')' block .

    $default  reduce using rule 21 (function)


State 117

   19 function: identdecl '(' idecllist ')' . block
   20         | identdecl '(' idecllist ')' . ';'

    ';'  shift, and go to state 130
    '{'  shift, and go to state 25

    block  go to state 131


State 118

   23 idecllist: idecllist ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 96

    basetype   go to state 28
    identdecl  go to state 132


State 119

   76 variable: expr '[' expr ']' .

    $default  reduce using rule 76 (variable)


State 120

   40 ifelse: TOK_IF '(' expr ')' statement . TOK_ELSE statement
   41       | TOK_IF '(' expr ')' statement .

    TOK_ELSE  shift, and go to state 133

    TOK_ELSE  [reduce using rule 41 (ifelse)]
    $default  reduce using rule 41 (ifelse)


State 121

   39 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 39 (while)


State 122

    8 structdef: TOK_STRUCT TOK_IDENT '{' fdeclist '}' .

    $default  reduce using rule 8 (structdef)


State 123

   10 fdeclist: fdeclist fielddecl . ';'

    ';'  shift, and go to state 134


State 124

   11 fdeclist: fielddecl ';' .

    $default  reduce using rule 11 (fdeclist)


State 125

   12 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 135


State 126

   13 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


State 127

   69 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 69 (allocator)


State 128

   70 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 70 (allocator)


State 129

   44 expr: expr . binop expr
   73 calllist: calllist ',' expr .
   76 variable: expr . '[' expr ']'
   77         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 64
    TOK_NE  shift, and go to state 65
    TOK_LT  shift, and go to state 66
    TOK_LE  shift, and go to state 67
    TOK_GT  shift, and go to state 68
    TOK_GE  shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '%'     shift, and go to state 75
    '['     shift, and go to state 76
    '.'     shift, and go to state 77

    $default  reduce using rule 73 (calllist)

    binop  go to state 79


State 130

   20 function: identdecl '(' idecllist ')' ';' .

    $default  reduce using rule 20 (function)


State 131

   19 function: identdecl '(' idecllist ')' block .

    $default  reduce using rule 19 (function)


State 132

   23 idecllist: idecllist ',' identdecl .

    $default  reduce using rule 23 (idecllist)


State 133

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '!'            shift, and go to state 23
    ';'            shift, and go to state 24
    '{'            shift, and go to state 25
    '('            shift, and go to state 26

    basetype   go to state 28
    identdecl  go to state 56
    block      go to state 31
    statement  go to state 136
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    unop       go to state 38
    allocator  go to state 39
    call       go to state 40
    variable   go to state 41
    constant   go to state 42


State 134

   10 fdeclist: fdeclist fielddecl ';' .

    $default  reduce using rule 10 (fdeclist)


State 135

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 136

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 40 (ifelse)
